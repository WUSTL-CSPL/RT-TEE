--- TTA_Crypto.c.orig	2012-10-23 16:25:21.000000000 +0200
+++ TTA_Crypto.c	2015-07-22 11:12:01.458463753 +0200
@@ -154,7 +154,7 @@
 TEE_OperationHandle getOperation(uint32_t lopId)
 {
    TEE_CryptoData *pCryptoData;
-   TEE_OperationHandle operation;
+   TEE_OperationHandle operation = TEE_HANDLE_NULL;
    
    pCryptoData = TEE_GetInstanceData();
    if(lopId == 1)
@@ -204,7 +204,7 @@
 TEE_ObjectHandle getKey(uint32_t lkeyId)
 {
    TEE_CryptoData *pCryptoData;
-   TEE_ObjectHandle key;
+   TEE_ObjectHandle key = TEE_HANDLE_NULL;
    
    pCryptoData = TEE_GetInstanceData();
    if(lkeyId == 1)
@@ -415,7 +415,7 @@
 {
    /* VARIABLES */
    TEE_CryptoData *pCryptoData;
-   TEE_Result nTempResult;
+   TEE_Result nTempResult = TEE_SUCCESS;
    
    /* CODE */
    if((TEE_PARAM_TYPE_GET(nParamTypes, 0) != TEE_PARAM_TYPE_VALUE_INPUT) &&         /* .a &.b : [in] algorithm & mode */
@@ -430,7 +430,7 @@
       SLogError("CmdAllocateOperation: operation id not correct");
       return TRUSTED_APP_ERROR_BAD_PARAMETERS;
    }
-   
+
    pCryptoData = TEE_GetInstanceData();
    if(pParams[3].value.a == 1)
       nTempResult = TEE_AllocateOperation(&pCryptoData->Operation1, pParams[0].value.a, pParams[0].value.b, pParams[1].value.a);
@@ -699,6 +699,84 @@
 }
 
 /**
+ *  Function CmdGetOperationInfoMultiple:
+ *  Description:
+ *    The function is called with:
+ *    - Param#0.a & .b: [in/out] [in].a = operation,
+ *    [out].a = algorithm & [out].b = operationClass
+ *    - Param#1   : [out].a = mode & .b = digestLength
+ *    - Param#2   : [out].a = maxKeySize & .b = handleState
+ *    - Param#3   : [out] = operationState, numberOfKeys,
+ *      KeySize1, requiredKeyUsage1, KeySize2, requiredKeyUsage2
+ */
+TEE_Result CmdGetOperationInfoMultiple(
+   void*       pSessionContext,
+   uint32_t    nParamTypes,
+   TEE_Param   pParams[4])
+{
+   /* VARIABLES */
+   TEE_OperationHandle operation;
+   TEE_OperationInfo operationInfo;
+   TEE_OperationInfoMultiple *operationInfoMultiple;
+   TEE_Result res;
+   uint32_t key_num;
+   uint32_t op_size;
+   uint32_t *obuf;
+   uint32_t i;
+   
+   /* CODE */
+   if((TEE_PARAM_TYPE_GET(nParamTypes, 0) != TEE_PARAM_TYPE_VALUE_INOUT) ||
+      (TEE_PARAM_TYPE_GET(nParamTypes, 1) != TEE_PARAM_TYPE_VALUE_OUTPUT) ||
+      (TEE_PARAM_TYPE_GET(nParamTypes, 2) != TEE_PARAM_TYPE_VALUE_OUTPUT) ||
+      (TEE_PARAM_TYPE_GET(nParamTypes, 3) != TEE_PARAM_TYPE_MEMREF_OUTPUT))
+   {
+      SLogError("CmdGetOperationInfo: Bad expected parameter types");
+      return TRUSTED_APP_ERROR_BAD_PARAMETERS;
+   }
+   if((pParams[0].value.a < 1) || (pParams[0].value.a > 4))
+   {
+      SLogError("CmdGetOperationInfo: dest operation id not correct");
+      return TRUSTED_APP_ERROR_BAD_PARAMETERS;
+   }
+   
+   operation = getOperation(pParams[0].value.a);
+   /* key_num computation : buffer size w/o operationState and numberOfKeys */
+   key_num = ((pParams[3].memref.size/4)-2)/2; 
+
+   op_size = sizeof(TEE_OperationInfoMultiple) + key_num * sizeof(TEE_OperationInfoKey);
+   operationInfoMultiple = TEE_Malloc(op_size, 0);
+   if(operationInfoMultiple == NULL)
+      return TRUSTED_APP_ERROR_MALLOC_FAILED;
+
+   res = TEE_GetOperationInfoMultiple(operation, operationInfoMultiple, &op_size);
+   if (res != TEE_SUCCESS)
+	goto out;
+
+   pParams[0].value.a = operationInfoMultiple->algorithm;
+   pParams[0].value.b = operationInfoMultiple->operationClass;
+   pParams[1].value.a = operationInfoMultiple->mode;
+   pParams[1].value.b = operationInfoMultiple->digestLength;
+   pParams[2].value.a = operationInfoMultiple->maxKeySize;
+   pParams[2].value.b = operationInfoMultiple->handleState;
+
+   obuf = (uint32_t *)pParams[3].memref.buffer;
+   *obuf = operationInfoMultiple->operationState;
+   obuf++;
+   *obuf = operationInfoMultiple->numberOfKeys;
+
+   for(i = 0; i < operationInfoMultiple->numberOfKeys; i++) {
+      obuf++;
+      *obuf = operationInfoMultiple->keyInformation[i].keySize;
+      obuf++;
+      *obuf = operationInfoMultiple->keyInformation[i].requiredKeyUsage;
+   }
+   
+out:
+   TEE_Free(operationInfoMultiple);
+   return res;
+}
+
+/**
  *  Function CmdDigestUpdate:
  *  Description:
  *    The function is called with:
@@ -1570,6 +1648,8 @@
          return CmdSetOperationKey2(pSessionContext, nParamTypes, pParams);
       case CMD_CopyOperation:
          return CmdCopyOperation(pSessionContext, nParamTypes, pParams);
+      case CMD_GetOperationInfoMultiple:
+         return CmdGetOperationInfoMultiple(pSessionContext, nParamTypes, pParams);
       case CMD_GetOperationInfo:
          return CmdGetOperationInfo(pSessionContext, nParamTypes, pParams);
       case CMD_DigestUpdate:
